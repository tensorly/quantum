
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_mbe_maxcut.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_mbe_maxcut.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_mbe_maxcut.py:


Multi-Basis Encoding
--------------------

Multi-Basis Encoding ([1]_) (MBE) quantum optimization algorithm for MaxCut using TensorLy-Quantum.
TensorLy-Quantum provides a Python interface 
to build TT-tensor network circuit simulator 
for large-scale simulation of variational quantum circuits
with full Autograd support similar to traditional PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default



    import tensorly as tl
    import tlquantum as tlq
    from torch import randint, rand, arange, cat, tanh, no_grad, float32
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu'

    dtype = float32

    nepochs = 40 #number of training epochs

    nqubits = 20 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 20
    lr = 0.7









.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device=device, dtype=dtype) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 43-46

Here we build a random graph with randomly weighted edges.
Note: MBE allows us to encode two vertices (typically two qubits) into a single qubit using the z and x-axes.
If y-axis included, we can encode three vertices per qubit.

.. GENERATED FROM PYTHON SOURCE LINES 46-53

.. code-block:: default

    vertices1 = randint(2*nqubits, (nterms,), device=device) # randomly generated first qubits (vertices) of each two-qubit term (edge)
    vertices2 = randint(2*nqubits, (nterms,), device=device) # randomly generated second qubits (vertices) of each two-qubit term (edge)
    vertices2[vertices2==vertices1] += 1 # because qubits in this graph are randomly generated, eliminate self-interacting terms
    vertices2[vertices2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated edge weights









.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default

    RotY1 = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device, dtype=dtype) #single-qubit rotations about the Y-axis
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, device=device, dtype=dtype)
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device, dtype=dtype), 0) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    unitaries = [RotY1, CZ0, RotY2]









.. GENERATED FROM PYTHON SOURCE LINES 61-87

.. code-block:: default


    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral) # build TTCircuit using specified unitaries
    opz, opx = tl.tensor([[1,0],[0,-1]], device=device, dtype=dtype), tl.tensor([[0,1],[1,0]], device=device, dtype=dtype) # measurement operators for MBE
    print(opz)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    loss_vec = tl.zeros(nepochs)
    cut_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of single-qubit pauli-z and pauli-x measurements
        spinsz, spinsx = circuit.forward_single_qubit(state, opz, opx)
        spins = cat((spinsz, spinsx))
        nl_spins = tanh(spins) # apply non-linear activation function to measurement results
        loss = tlq.calculate_cut(nl_spins, vertices1, vertices2, weights) # calculate the loss function using MBE
        print('Relaxation (raw) loss at epoch ' + str(epoch) + ': ' + str(loss.item()) + '. \n')
        with no_grad():
            cut_vec[epoch] = tlq.calculate_cut(tl.sign(spins), vertices1, vertices2, weights, get_cut=True) #calculate the rounded MaxCut estimate (algorithm's result)
            print('Rounded MaxCut value (algorithm\'s solution): ' + str(cut_vec[epoch]) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        loss.backward()
        opt.step()
        opt.zero_grad()
        loss_vec[epoch] = loss






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.,  0.],
            [ 0., -1.]])
    Relaxation (raw) loss at epoch 0: -0.05605253577232361. 

    Rounded MaxCut value (algorithm's solution): tensor(2.3807). 

    Relaxation (raw) loss at epoch 1: -0.355532169342041. 

    Rounded MaxCut value (algorithm's solution): tensor(4.8989). 

    Relaxation (raw) loss at epoch 2: -1.7227672338485718. 

    Rounded MaxCut value (algorithm's solution): tensor(7.7399). 

    Relaxation (raw) loss at epoch 3: -2.846140146255493. 

    Rounded MaxCut value (algorithm's solution): tensor(8.6329). 

    Relaxation (raw) loss at epoch 4: -3.404665470123291. 

    Rounded MaxCut value (algorithm's solution): tensor(8.6329). 

    Relaxation (raw) loss at epoch 5: -3.471266031265259. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 6: -3.2145047187805176. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 7: -3.217313528060913. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 8: -3.5649220943450928. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 9: -3.69608473777771. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 10: -3.6055102348327637. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 11: -3.595909595489502. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 12: -3.744042158126831. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 13: -3.908233165740967. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 14: -3.978666305541992. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 15: -3.9797487258911133. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 16: -3.9584782123565674. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 17: -3.9293909072875977. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 18: -3.911252498626709. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 19: -3.948477029800415. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 20: -4.036514759063721. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 21: -4.1012282371521. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 22: -4.095981121063232. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 23: -4.059205532073975. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 24: -4.04964542388916. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 25: -4.077630996704102. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 26: -4.1121602058410645. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 27: -4.1297783851623535. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 28: -4.1338348388671875. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 29: -4.133588790893555. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 30: -4.1306986808776855. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 31: -4.12720251083374. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 32: -4.131616592407227. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 33: -4.147467613220215. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 34: -4.1639556884765625. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 35: -4.167520523071289. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 36: -4.160277843475342. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 37: -4.156234264373779. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 38: -4.161535263061523. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 

    Relaxation (raw) loss at epoch 39: -4.169371128082275. 

    Rounded MaxCut value (algorithm's solution): tensor(8.8059). 





.. GENERATED FROM PYTHON SOURCE LINES 88-99

.. code-block:: default

    plt.rc('xtick')
    plt.rc('ytick')
    fig, ax1 = plt.subplots()
    ax1.plot(loss_vec.detach().numpy(), color='k')
    ax2 = ax1.twinx()
    ax2.plot(cut_vec.detach().numpy(), color='g')
    ax1.set_xlabel('Epochs')
    ax1.set_ylabel('Loss', color='k')
    ax2.set_ylabel('Cut', color='g')
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_mbe_maxcut_001.png
   :alt: plot mbe maxcut
   :srcset: /auto_examples/images/sphx_glr_plot_mbe_maxcut_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-103

References
----------
.. [1] T. L. Patti, J. Kossaifi, A. Anandkumar, and S. F. Yelin, "Variational Quantum Optimization with Multi-Basis Encodings," (2021), arXiv:2106.13304.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.375 seconds)


.. _sphx_glr_download_auto_examples_plot_mbe_maxcut.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mbe_maxcut.py <plot_mbe_maxcut.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mbe_maxcut.ipynb <plot_mbe_maxcut.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
