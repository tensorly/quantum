
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange, complex64
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu'

    dtype = complex64

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device=device, dtype=dtype) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 43-45

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device=device, dtype=dtype), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device=device, dtype=dtype), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device=device, dtype=dtype), *tlq.so4(0,1, device=device, dtype=dtype), tlq.RotY(device=device, dtype=dtype), *tlq.so4(2, 3, device=device, dtype=dtype)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype) # one Y-axis rotation gate applied to each qubit of the circuit
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype)
    RotX = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='x', device=device, dtype=dtype)
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device, dtype=dtype), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device, dtype=dtype), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    unitaries = [RotY, SO4_01, RotY, CZ0, RotX]








.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 90-106

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is (0.4334917664527893+7.450580596923828e-08j). 

    /home/runner/work/quantum/quantum/doc/source/examples/plot_vqe_transverse_field_Ising.py:103: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at  ../aten/src/ATen/native/Copy.cpp:244.)
      energy_vec[epoch] = energy
    Energy (loss) at epoch 1 is (-0.7298195362091064-2.2351741790771484e-08j). 

    Energy (loss) at epoch 2 is (-1.1091253757476807-1.043081283569336e-07j). 

    Energy (loss) at epoch 3 is (-1.2454771995544434+7.450580596923828e-09j). 

    Energy (loss) at epoch 4 is (-1.927337408065796+1.4901161193847656e-08j). 

    Energy (loss) at epoch 5 is (-2.646976947784424-2.7008354663848877e-08j). 

    Energy (loss) at epoch 6 is (-2.730757474899292-1.0710209608078003e-07j). 

    Energy (loss) at epoch 7 is (-2.944962501525879+3.725290298461914e-09j). 

    Energy (loss) at epoch 8 is (-3.2626779079437256+7.438939064741135e-08j). 

    Energy (loss) at epoch 9 is (-3.0641744136810303-6.426125764846802e-08j). 

    Energy (loss) at epoch 10 is (-2.8299248218536377-6.332993507385254e-08j). 

    Energy (loss) at epoch 11 is (-2.7800753116607666+5.960464477539063e-08j). 

    Energy (loss) at epoch 12 is (-2.967548370361328-7.450580596923828e-09j). 

    Energy (loss) at epoch 13 is (-3.2408230304718018+7.450580596923828e-09j). 

    Energy (loss) at epoch 14 is (-3.355468988418579-3.725290298461914e-09j). 

    Energy (loss) at epoch 15 is (-3.3248932361602783+1.7695128917694092e-08j). 

    Energy (loss) at epoch 16 is (-3.2667932510375977+3.6961864680051804e-08j). 

    Energy (loss) at epoch 17 is (-3.350924253463745+8.149072527885437e-10j). 

    Energy (loss) at epoch 18 is (-3.557961940765381-3.259629011154175e-09j). 

    Energy (loss) at epoch 19 is (-3.607273578643799-3.818422555923462e-08j). 

    Energy (loss) at epoch 20 is (-3.5186638832092285+1.5454133972525597e-08j). 

    Energy (loss) at epoch 21 is (-3.4774229526519775-1.1641532182693481e-08j). 

    Energy (loss) at epoch 22 is (-3.471245527267456-1.421431079506874e-07j). 

    Energy (loss) at epoch 23 is (-3.4635016918182373+1.792795956134796e-08j). 

    Energy (loss) at epoch 24 is (-3.5044732093811035-5.8964360505342484e-08j). 

    Energy (loss) at epoch 25 is (-3.5707859992980957-4.285539034754038e-08j). 

    Energy (loss) at epoch 26 is (-3.6130752563476562+4.18804120272398e-08j). 

    Energy (loss) at epoch 27 is (-3.622361183166504+7.404014468193054e-08j). 

    Energy (loss) at epoch 28 is (-3.604844093322754+5.960464477539063e-08j). 

    Energy (loss) at epoch 29 is (-3.6025068759918213+6.100162863731384e-08j). 

    Energy (loss) at epoch 30 is (-3.6191012859344482-2.986053004860878e-08j). 

    Energy (loss) at epoch 31 is (-3.634892225265503-7.404014468193054e-08j). 

    Energy (loss) at epoch 32 is (-3.633486032485962+1.1478550732135773e-07j). 

    Energy (loss) at epoch 33 is (-3.6097609996795654-3.003515303134918e-08j). 

    Energy (loss) at epoch 34 is (-3.6202893257141113+3.899913281202316e-08j). 

    Energy (loss) at epoch 35 is (-3.6634271144866943+1.1990778148174286e-08j). 

    Energy (loss) at epoch 36 is (-3.6784043312072754-1.6880221664905548e-08j). 

    Energy (loss) at epoch 37 is (-3.682673931121826+2.0023435354232788e-08j). 

    Energy (loss) at epoch 38 is (-3.686018943786621-8.149072527885437e-09j). 

    Energy (loss) at epoch 39 is (-3.6690471172332764+2.6775524020195007e-09j). 

    Energy (loss) at epoch 40 is (-3.6590311527252197-8.338247425854206e-09j). 

    Energy (loss) at epoch 41 is (-3.665822982788086-1.6007106751203537e-09j). 

    Energy (loss) at epoch 42 is (-3.67864727973938+1.6763806343078613e-08j). 

    Energy (loss) at epoch 43 is (-3.68902850151062+3.882450982928276e-08j). 

    Energy (loss) at epoch 44 is (-3.6911489963531494+8.32369551062584e-09j). 

    Energy (loss) at epoch 45 is (-3.689209222793579+4.292814992368221e-08j). 

    Energy (loss) at epoch 46 is (-3.687225103378296-6.868503987789154e-09j). 

    Energy (loss) at epoch 47 is (-3.691096782684326+8.265487849712372e-09j). 

    Energy (loss) at epoch 48 is (-3.6933162212371826-1.3969838619232178e-08j). 

    Energy (loss) at epoch 49 is (-3.689647912979126+1.4028046280145645e-08j). 

    Energy (loss) at epoch 50 is (-3.6916756629943848-1.4260876923799515e-09j). 

    Energy (loss) at epoch 51 is (-3.694082498550415-1.6763806343078613e-08j). 

    Energy (loss) at epoch 52 is (-3.6955764293670654+3.4924596548080444e-09j). 

    Energy (loss) at epoch 53 is (-3.7005062103271484+1.1525116860866547e-08j). 

    Energy (loss) at epoch 54 is (-3.7024786472320557-2.764863893389702e-10j). 

    Energy (loss) at epoch 55 is (-3.7007646560668945+1.3096723705530167e-09j). 

    Energy (loss) at epoch 56 is (-3.698608636856079+1.1641532182693481e-10j). 

    Energy (loss) at epoch 57 is (-3.698892593383789-2.3283064365386963e-10j). 

    Energy (loss) at epoch 58 is (-3.7004101276397705-4.71482053399086e-09j). 

    Energy (loss) at epoch 59 is (-3.7016801834106445-1.234002411365509e-08j). 

    Energy (loss) at epoch 60 is (-3.7022764682769775-1.1641532182693481e-09j). 

    Energy (loss) at epoch 61 is (-3.7024495601654053-7.043126970529556e-09j). 

    Energy (loss) at epoch 62 is (-3.704049825668335-5.878973752260208e-09j). 

    Energy (loss) at epoch 63 is (-3.703585386276245-9.149516699835658e-09j). 

    Energy (loss) at epoch 64 is (-3.7027788162231445+3.6088749766349792e-09j). 

    Energy (loss) at epoch 65 is (-3.702948570251465+7.974449545145035e-09j). 

    Energy (loss) at epoch 66 is (-3.7027204036712646-1.1350493878126144e-08j). 

    Energy (loss) at epoch 67 is (-3.703714370727539+2.5174813345074654e-09j). 

    Energy (loss) at epoch 68 is (-3.705070972442627+7.741618901491165e-09j). 

    Energy (loss) at epoch 69 is (-3.705442190170288-7.275957614183426e-10j). 

    Energy (loss) at epoch 70 is (-3.7048537731170654-3.4924596548080444e-09j). 

    Energy (loss) at epoch 71 is (-3.7046148777008057-3.157765604555607e-09j). 

    Energy (loss) at epoch 72 is (-3.704629421234131-2.561137080192566e-09j). 

    Energy (loss) at epoch 73 is (-3.705118417739868+2.3865140974521637e-09j). 

    Energy (loss) at epoch 74 is (-3.7052760124206543-3.4924596548080444e-10j). 

    Energy (loss) at epoch 75 is (-3.7052910327911377+4.656612873077393e-10j). 

    Energy (loss) at epoch 76 is (-3.7055516242980957+4.321918822824955e-09j). 

    Energy (loss) at epoch 77 is (-3.7054760456085205+5.995389074087143e-09j). 

    Energy (loss) at epoch 78 is (-3.7057104110717773-4.656612873077393e-10j). 

    Energy (loss) at epoch 79 is (-3.7057197093963623+7.450580596923828e-09j). 





.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().cpu().numpy(), color='r')
    plt.hlines(ground_state_energy.detach().cpu().numpy(), 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-124

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.672 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
