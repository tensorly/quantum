
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange, complex64
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu'

    dtype = complex64

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device=device, dtype=dtype) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 43-45

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device=device, dtype=dtype), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device=device, dtype=dtype), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device=device, dtype=dtype), *tlq.so4(0,1, device=device, dtype=dtype), tlq.RotY(device=device, dtype=dtype), *tlq.so4(2, 3, device=device, dtype=dtype)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype) # one Y-axis rotation gate applied to each qubit of the circuit
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype)
    RotX = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='x', device=device, dtype=dtype)
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device, dtype=dtype), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device, dtype=dtype), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    unitaries = [RotY, SO4_01, RotY, CZ0, RotX]








.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 90-106

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is (0.5670438408851624+6.705522537231445e-08j). 

    /home/runner/work/quantum/quantum/doc/source/examples/plot_vqe_transverse_field_Ising.py:103: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at  ../aten/src/ATen/native/Copy.cpp:244.)
      energy_vec[epoch] = energy
    Energy (loss) at epoch 1 is (-0.931693971157074+8.940696716308594e-08j). 

    Energy (loss) at epoch 2 is (-0.8280588388442993-3.725290298461914e-09j). 

    Energy (loss) at epoch 3 is (-2.0210180282592773+1.0058283805847168e-07j). 

    Energy (loss) at epoch 4 is (-3.4118847846984863-2.384185791015625e-07j). 

    Energy (loss) at epoch 5 is (-3.4926905632019043+5.960464477539063e-08j). 

    Energy (loss) at epoch 6 is (-3.260603427886963+8.940696716308594e-08j). 

    Energy (loss) at epoch 7 is (-3.294234275817871-4.6566128730773926e-08j). 

    Energy (loss) at epoch 8 is (-3.7879555225372314+6.891787052154541e-08j). 

    Energy (loss) at epoch 9 is (-4.310919761657715+7.450580596923828e-09j). 

    Energy (loss) at epoch 10 is (-4.422533988952637-4.0978193283081055e-07j). 

    Energy (loss) at epoch 11 is (-4.205081939697266-1.9371509552001953e-07j). 

    Energy (loss) at epoch 12 is (-4.066237449645996+7.450580596923828e-08j). 

    Energy (loss) at epoch 13 is (-4.178010940551758+1.4901161193847656e-08j). 

    Energy (loss) at epoch 14 is (-4.510674476623535-5.21540641784668e-08j). 

    Energy (loss) at epoch 15 is (-4.88493537902832-1.1920928955078125e-07j). 

    Energy (loss) at epoch 16 is (-4.973745822906494-8.940696716308594e-08j). 

    Energy (loss) at epoch 17 is (-4.795915126800537-7.450580596923828e-09j). 

    Energy (loss) at epoch 18 is (-4.6897687911987305-3.2223761081695557e-07j). 

    Energy (loss) at epoch 19 is (-4.774332523345947+1.0058283805847168e-07j). 

    Energy (loss) at epoch 20 is (-4.92000675201416-4.470348358154297e-08j). 

    Energy (loss) at epoch 21 is (-4.997851371765137-1.7508864402770996e-07j). 

    Energy (loss) at epoch 22 is (-4.950203895568848-1.7136335372924805e-07j). 

    Energy (loss) at epoch 23 is (-4.829700469970703+2.2351741790771484e-08j). 

    Energy (loss) at epoch 24 is (-4.8343095779418945-2.2351741790771484e-08j). 

    Energy (loss) at epoch 25 is (-5.011171340942383+2.4586915969848633e-07j). 

    Energy (loss) at epoch 26 is (-5.13656759262085-2.9802322387695312e-08j). 

    Energy (loss) at epoch 27 is (-5.108947277069092-6.891787052154541e-08j). 

    Energy (loss) at epoch 28 is (-5.044471740722656-5.774199962615967e-08j). 

    Energy (loss) at epoch 29 is (-5.020716667175293-1.0523945093154907e-07j). 

    Energy (loss) at epoch 30 is (-5.057780742645264-1.1362135410308838e-07j). 

    Energy (loss) at epoch 31 is (-5.1247053146362305-1.2479722499847412e-07j). 

    Energy (loss) at epoch 32 is (-5.128939628601074-1.0617077350616455e-07j). 

    Energy (loss) at epoch 33 is (-5.077502727508545+4.377216100692749e-08j). 

    Energy (loss) at epoch 34 is (-5.074437141418457+1.1082738637924194e-07j). 

    Energy (loss) at epoch 35 is (-5.130845546722412+8.614733815193176e-08j). 

    Energy (loss) at epoch 36 is (-5.163638114929199+2.8638169169425964e-08j). 

    Energy (loss) at epoch 37 is (-5.147465705871582+1.878943294286728e-07j). 

    Energy (loss) at epoch 38 is (-5.133542537689209+2.039596438407898e-07j). 

    Energy (loss) at epoch 39 is (-5.13938045501709+4.563480615615845e-08j). 

    Energy (loss) at epoch 40 is (-5.150146484375-1.0803341865539551e-07j). 

    Energy (loss) at epoch 41 is (-5.169564247131348-1.3224780559539795e-07j). 

    Energy (loss) at epoch 42 is (-5.179523468017578-4.0512531995773315e-08j). 

    Energy (loss) at epoch 43 is (-5.1724348068237305-1.2060627341270447e-07j). 

    Energy (loss) at epoch 44 is (-5.183623790740967+3.3527612686157227e-08j). 

    Energy (loss) at epoch 45 is (-5.209755897521973-5.960464477539063e-08j). 

    Energy (loss) at epoch 46 is (-5.220541000366211+3.725290298461914e-08j). 

    Energy (loss) at epoch 47 is (-5.222683906555176+6.705522537231445e-08j). 

    Energy (loss) at epoch 48 is (-5.230338096618652-1.564621925354004e-07j). 

    Energy (loss) at epoch 49 is (-5.247143745422363-1.1920928955078125e-07j). 

    Energy (loss) at epoch 50 is (-5.2768731117248535-1.341104507446289e-07j). 

    Energy (loss) at epoch 51 is (-5.315103530883789-1.9371509552001953e-07j). 

    Energy (loss) at epoch 52 is (-5.361203193664551-1.4901161193847656e-07j). 

    Energy (loss) at epoch 53 is (-5.438899517059326-5.21540641784668e-08j). 

    Energy (loss) at epoch 54 is (-5.581884384155273+1.4901161193847656e-08j). 

    Energy (loss) at epoch 55 is (-5.803703308105469-2.9802322387695312e-08j). 

    Energy (loss) at epoch 56 is (-6.080986976623535+4.0046870708465576e-08j). 

    Energy (loss) at epoch 57 is (-6.30592155456543+3.725290298461914e-08j). 

    Energy (loss) at epoch 58 is (-6.324008941650391-4.0978193283081055e-08j). 

    Energy (loss) at epoch 59 is (-6.195066928863525-1.862645149230957e-08j). 

    Energy (loss) at epoch 60 is (-6.145727634429932+4.284083843231201e-08j). 

    Energy (loss) at epoch 61 is (-6.247806072235107-3.003515303134918e-08j). 

    Energy (loss) at epoch 62 is (-6.373565196990967-1.210719347000122e-08j). 

    Energy (loss) at epoch 63 is (-6.325711250305176-3.725290298461914e-09j). 

    Energy (loss) at epoch 64 is (-6.174354076385498+6.51925802230835e-09j). 

    Energy (loss) at epoch 65 is (-6.175478935241699-2.9802322387695312e-08j). 

    Energy (loss) at epoch 66 is (-6.325377941131592-9.778887033462524e-09j). 

    Energy (loss) at epoch 67 is (-6.428868293762207-2.421438694000244e-08j). 

    Energy (loss) at epoch 68 is (-6.412057399749756-2.7939677238464355e-09j). 

    Energy (loss) at epoch 69 is (-6.39110803604126+1.1175870895385742e-08j). 

    Energy (loss) at epoch 70 is (-6.397576332092285-2.2351741790771484e-08j). 

    Energy (loss) at epoch 71 is (-6.419375896453857+3.5390257835388184e-08j). 

    Energy (loss) at epoch 72 is (-6.433423042297363+1.6763806343078613e-08j). 

    Energy (loss) at epoch 73 is (-6.423798084259033-1.4435499906539917e-08j). 

    Energy (loss) at epoch 74 is (-6.410143852233887-9.313225746154785e-09j). 

    Energy (loss) at epoch 75 is (-6.395601749420166+1.862645149230957e-09j). 

    Energy (loss) at epoch 76 is (-6.413251876831055-2.7939677238464355e-08j). 

    Energy (loss) at epoch 77 is (-6.443093776702881-1.862645149230957e-08j). 

    Energy (loss) at epoch 78 is (-6.470254898071289-1.83936208486557e-08j). 

    Energy (loss) at epoch 79 is (-6.485487461090088+3.91155481338501e-08j). 





.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().cpu().numpy(), color='r')
    plt.hlines(ground_state_energy.detach().cpu().numpy(), 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-124

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.586 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
