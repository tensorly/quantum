
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange, complex64
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu'

    dtype = complex64

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device=device, dtype=dtype) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 43-45

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device=device, dtype=dtype), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device=device, dtype=dtype), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device=device, dtype=dtype), *tlq.so4(0,1, device=device, dtype=dtype), tlq.RotY(device=device, dtype=dtype), *tlq.so4(2, 3, device=device, dtype=dtype)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype) # one Y-axis rotation gate applied to each qubit of the circuit
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype)
    RotX = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='x', device=device, dtype=dtype)
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device, dtype=dtype), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device, dtype=dtype), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    unitaries = [RotY, SO4_01, RotY, CZ0, RotX]








.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 90-106

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Energy (loss) at epoch 0 is (-1.429581880569458+2.1420419216156006e-08j). 

    /home/runner/work/quantum/quantum/doc/source/examples/plot_vqe_transverse_field_Ising.py:103: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at  ../aten/src/ATen/native/Copy.cpp:244.)
      energy_vec[epoch] = energy
    Energy (loss) at epoch 1 is (-1.8923441171646118+8.940696716308594e-08j). 

    Energy (loss) at epoch 2 is (-2.460258722305298+1.4901161193847656e-08j). 

    Energy (loss) at epoch 3 is (-3.133864402770996+5.960464477539063e-08j). 

    Energy (loss) at epoch 4 is (-2.6091301441192627+8.568167686462402e-08j). 

    Energy (loss) at epoch 5 is (-2.7654640674591064+1.862645149230957e-08j). 

    Energy (loss) at epoch 6 is (-3.2702977657318115-3.2782554626464844e-07j). 

    Energy (loss) at epoch 7 is (-3.2589566707611084+2.384185791015625e-07j). 

    Energy (loss) at epoch 8 is (-2.9753293991088867-9.313225746154785e-09j). 

    Energy (loss) at epoch 9 is (-3.0455362796783447-2.2351741790771484e-08j). 

    Energy (loss) at epoch 10 is (-3.3753082752227783-3.203749656677246e-07j). 

    Energy (loss) at epoch 11 is (-3.486581563949585-6.82193785905838e-08j). 

    Energy (loss) at epoch 12 is (-3.3422353267669678+8.940696716308594e-08j). 

    Energy (loss) at epoch 13 is (-3.2809205055236816+0j). 

    Energy (loss) at epoch 14 is (-3.3376829624176025+1.2479722499847412e-07j). 

    Energy (loss) at epoch 15 is (-3.360626697540283+1.9371509552001953e-07j). 

    Energy (loss) at epoch 16 is (-3.381815195083618+1.1920928955078125e-07j). 

    Energy (loss) at epoch 17 is (-3.476452350616455+2.086162567138672e-07j). 

    Energy (loss) at epoch 18 is (-3.545548677444458-6.705522537231445e-08j). 

    Energy (loss) at epoch 19 is (-3.486259698867798-3.818422555923462e-08j). 

    Energy (loss) at epoch 20 is (-3.4111509323120117+1.2293457984924316e-07j). 

    Energy (loss) at epoch 21 is (-3.4533016681671143-7.450580596923828e-09j). 

    Energy (loss) at epoch 22 is (-3.5350921154022217-2.7194619178771973e-07j). 

    Energy (loss) at epoch 23 is (-3.5307118892669678-9.685754776000977e-08j). 

    Energy (loss) at epoch 24 is (-3.487234115600586+1.1175870895385742e-07j). 

    Energy (loss) at epoch 25 is (-3.504114866256714+1.4901161193847656e-08j). 

    Energy (loss) at epoch 26 is (-3.55582594871521-1.3783574104309082e-07j). 

    Energy (loss) at epoch 27 is (-3.559901237487793+7.764901965856552e-08j). 

    Energy (loss) at epoch 28 is (-3.529531955718994+2.5331974029541016e-07j). 

    Energy (loss) at epoch 29 is (-3.5292341709136963+1.862645149230957e-08j). 

    Energy (loss) at epoch 30 is (-3.549808979034424+7.450580596923828e-09j). 

    Energy (loss) at epoch 31 is (-3.553311586380005+2.207234501838684e-07j). 

    Energy (loss) at epoch 32 is (-3.5543038845062256-1.862645149230957e-08j). 

    Energy (loss) at epoch 33 is (-3.5715460777282715-1.9185245037078857e-07j). 

    Energy (loss) at epoch 34 is (-3.5777242183685303+1.3504177331924438e-07j). 

    Energy (loss) at epoch 35 is (-3.560260057449341-6.51925802230835e-09j). 

    Energy (loss) at epoch 36 is (-3.555589437484741-6.51925802230835e-08j). 

    Energy (loss) at epoch 37 is (-3.573580741882324+6.891787052154541e-08j). 

    Energy (loss) at epoch 38 is (-3.5802226066589355+7.543712854385376e-08j). 

    Energy (loss) at epoch 39 is (-3.571946382522583+2.1979212760925293e-07j). 

    Energy (loss) at epoch 40 is (-3.5760066509246826-4.6566128730773926e-08j). 

    Energy (loss) at epoch 41 is (-3.585836172103882+3.364402800798416e-07j). 

    Energy (loss) at epoch 42 is (-3.5807077884674072-5.587935447692871e-09j). 

    Energy (loss) at epoch 43 is (-3.5736958980560303-5.587935447692871e-09j). 

    Energy (loss) at epoch 44 is (-3.5799849033355713+1.043081283569336e-07j). 

    Energy (loss) at epoch 45 is (-3.5868237018585205-2.100132405757904e-07j). 

    Energy (loss) at epoch 46 is (-3.58541202545166+9.12696123123169e-08j). 

    Energy (loss) at epoch 47 is (-3.5845141410827637+7.264316082000732e-08j). 

    Energy (loss) at epoch 48 is (-3.586155414581299+1.648440957069397e-07j). 

    Energy (loss) at epoch 49 is (-3.585850477218628-1.3504177331924438e-07j). 

    Energy (loss) at epoch 50 is (-3.585873603820801-2.60770320892334e-08j). 

    Energy (loss) at epoch 51 is (-3.5881147384643555+1.30385160446167e-08j). 

    Energy (loss) at epoch 52 is (-3.58889102935791-5.3551048040390015e-09j). 

    Energy (loss) at epoch 53 is (-3.5879721641540527-1.0244548320770264e-07j). 

    Energy (loss) at epoch 54 is (-3.589085340499878+1.7043203115463257e-07j). 

    Energy (loss) at epoch 55 is (-3.5907721519470215-6.245682016015053e-08j). 

    Energy (loss) at epoch 56 is (-3.5893917083740234-1.0058283805847168e-07j). 

    Energy (loss) at epoch 57 is (-3.588231086730957+3.972090780735016e-07j). 

    Energy (loss) at epoch 58 is (-3.5905158519744873-1.0221265256404877e-07j). 

    Energy (loss) at epoch 59 is (-3.592200517654419+2.60770320892334e-08j). 

    Energy (loss) at epoch 60 is (-3.59108567237854+2.784654498100281e-07j). 

    Energy (loss) at epoch 61 is (-3.590388774871826+3.905734047293663e-08j). 

    Energy (loss) at epoch 62 is (-3.5911056995391846+1.0151416063308716e-07j). 

    Energy (loss) at epoch 63 is (-3.591625452041626+9.313225746154785e-08j). 

    Energy (loss) at epoch 64 is (-3.591928482055664+1.1245720088481903e-07j). 

    Energy (loss) at epoch 65 is (-3.5921759605407715-1.8207356333732605e-07j). 

    Energy (loss) at epoch 66 is (-3.5919196605682373-2.1792948246002197e-07j). 

    Energy (loss) at epoch 67 is (-3.5919320583343506-1.541338860988617e-07j). 

    Energy (loss) at epoch 68 is (-3.592583179473877-8.591450750827789e-08j). 

    Energy (loss) at epoch 69 is (-3.5925095081329346+7.776543498039246e-08j). 

    Energy (loss) at epoch 70 is (-3.5921552181243896-3.632158041000366e-08j). 

    Energy (loss) at epoch 71 is (-3.592747211456299-1.8131686374545097e-07j). 

    Energy (loss) at epoch 72 is (-3.5930752754211426-3.3993273973464966e-08j). 

    Energy (loss) at epoch 73 is (-3.5926952362060547-7.427297532558441e-08j). 

    Energy (loss) at epoch 74 is (-3.592773675918579+2.8562499210238457e-07j). 

    Energy (loss) at epoch 75 is (-3.5930707454681396+1.6530975699424744e-07j). 

    Energy (loss) at epoch 76 is (-3.5931077003479004-6.170012056827545e-08j). 

    Energy (loss) at epoch 77 is (-3.5931994915008545+1.7182901501655579e-07j). 

    Energy (loss) at epoch 78 is (-3.5932748317718506+1.364387571811676e-07j). 

    Energy (loss) at epoch 79 is (-3.593214511871338-6.612390279769897e-08j). 





.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().cpu().numpy(), color='r')
    plt.hlines(ground_state_energy.detach().cpu().numpy(), 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-124

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.706 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
