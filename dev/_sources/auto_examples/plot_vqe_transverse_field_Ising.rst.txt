
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_vqe_transverse_field_Ising.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_vqe_transverse_field_Ising.py:


Variational Quantum Eigensolver
-------------------------------

Variational Quantum Eigensolver ([1]_) (VQE) 
with Transverse Field Ising Model Hamiltonian using TensorLy-Quantum.
TensorLy-Quantum provides a Pythonic API to TT-tensor network circuit simulation
for large-scale simulation of variational quantum circuits,
with full Autograd support and an interface similar to PyTorch Neural Networks.

.. GENERATED FROM PYTHON SOURCE LINES 11-20

.. code-block:: default


    import tensorly as tl
    import tlquantum as tlq
    from tensorly.tt_matrix import TTMatrix
    from torch import randint, rand, arange, complex64
    from torch.optim import Adam
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Uncomment the line below to use the GPU

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: default


    #device = 'cuda' 
    device = 'cpu'

    dtype = complex64

    nepochs = 80 #number of training epochs

    nqubits = 5 #number of qubits
    ncontraq = 2 #2 #number of qubits to pre-contract into single core
    ncontral = 2 #2 #number of layers to pre-contract into a single core
    nterms = 10
    lr = 0.5









.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    state = tlq.spins_to_tt_state([0 for i in range(nqubits)], device=device, dtype=dtype) # generate generic zero state |00000>
    state = tlq.qubits_contract(state, ncontraq)









.. GENERATED FROM PYTHON SOURCE LINES 43-45

Here we build a random spin-spin and transverse field weights.
two-qubit terms

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    qubits1 = randint(nqubits, (nterms,), device=device) # randomly generated first qubits of each two-qubit term
    qubits2 = randint(nqubits, (nterms,), device=device) # randomly generated second qubits of each two-qubit term
    qubits2[qubits2==qubits1] += 1 # because qubits in this Hamiltonian randomly generated, eliminate self-interacting terms
    qubits2[qubits2 >= nqubits] = 0
    weights = rand((nterms,), device=device) # randomly generated coefficients of each two-qubit interaction in Hamiltonian
    binary_H = tlq.binary_hamiltonian(tlq.pauli_z(device=device, dtype=dtype), nqubits, qubits1, qubits2, weights) # build the spin-spin Hamiltonian H








.. GENERATED FROM PYTHON SOURCE LINES 53-57

.. code-block:: default

    qubits = arange(nqubits, device=device) # specify that each qubit will have a transverse field term
    weights = rand((nqubits,), device=device) # randomly generated coefficients for the transverse field felt by each qubit
    unary_H = tlq.unary_hamiltonian(tlq.pauli_x(device=device, dtype=dtype), nqubits, qubits, weights) #build the transverse field Hamiltonian








.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default

    Ising_H = tlq.tt_matrix_sum(binary_H, unary_H)









.. GENERATED FROM PYTHON SOURCE LINES 64-66

.. code-block:: default

    custom_U = tlq.Unitary([tlq.RotY(device=device, dtype=dtype), *tlq.so4(0,1, device=device, dtype=dtype), tlq.RotY(device=device, dtype=dtype), *tlq.so4(2, 3, device=device, dtype=dtype)], nqubits, ncontraq)








.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default

    RotY = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype) # one Y-axis rotation gate applied to each qubit of the circuit
    RotY2 = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='y', device=device, dtype=dtype)
    RotX = tlq.UnaryGatesUnitary(nqubits, ncontraq, axis='x', device=device, dtype=dtype)
    parity = 0
    CZ0 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.cz(device=device, dtype=dtype), parity) # one controlled-z gate for each pair of qubits using even parity (even qubits control)
    parity = 1
    SO4_01 = tlq.BinaryGatesUnitary(nqubits, ncontraq, tlq.so4(2,3, device=device, dtype=dtype), parity) # one SO4 rotation about two-qubit states |2> and |3> with odd parity









.. GENERATED FROM PYTHON SOURCE LINES 79-81

.. code-block:: default

    unitaries = [RotY, SO4_01, RotY, CZ0, RotX]








.. GENERATED FROM PYTHON SOURCE LINES 82-87

.. code-block:: default

    repeat_block, unitaries_automatic = 3, []
    for i in range(repeat_block):
        unitaries_automatic += unitaries









.. GENERATED FROM PYTHON SOURCE LINES 90-106

.. code-block:: default

    circuit = tlq.TTCircuit(unitaries, ncontraq, ncontral)
    opt = Adam(circuit.parameters(), lr=lr, amsgrad=True) # define PyTorch optimizer
    energy_vec = tl.zeros(nepochs)

    for epoch in range(nepochs):
        # TTCircuit forward pass computes expectation value of Ising_H
        energy = circuit.forward_expectation_value(state, Ising_H)
        print('Energy (loss) at epoch ' + str(epoch) + ' is ' + str(energy[0].item()) + '. \n')

        # PyTorch Autograd attends to backwards pass and parameter update
        energy.backward()
        opt.step()
        opt.zero_grad(epoch)
        energy_vec[epoch] = energy






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Energy (loss) at epoch 0 is (0.10348840057849884+3.725290298461914e-09j). 

    /home/runner/work/quantum/quantum/doc/source/examples/plot_vqe_transverse_field_Ising.py:103: UserWarning: Casting complex values to real discards the imaginary part (Triggered internally at  ../aten/src/ATen/native/Copy.cpp:244.)
      energy_vec[epoch] = energy
    Energy (loss) at epoch 1 is (-1.1643363237380981-2.0489096641540527e-08j). 

    Energy (loss) at epoch 2 is (-0.5147826671600342-2.9802322387695312e-08j). 

    Energy (loss) at epoch 3 is (-1.600484848022461+4.470348358154297e-08j). 

    Energy (loss) at epoch 4 is (-2.7139809131622314+0j). 

    Energy (loss) at epoch 5 is (-2.8421471118927+1.4901161193847656e-08j). 

    Energy (loss) at epoch 6 is (-2.5915849208831787-8.940696716308594e-08j). 

    Energy (loss) at epoch 7 is (-2.7871017456054688+6.705522537231445e-08j). 

    Energy (loss) at epoch 8 is (-3.087742567062378-2.0489096641540527e-08j). 

    Energy (loss) at epoch 9 is (-3.439378023147583+1.0151416063308716e-07j). 

    Energy (loss) at epoch 10 is (-3.763443946838379-3.725290298461914e-08j). 

    Energy (loss) at epoch 11 is (-3.887387752532959+4.470348358154297e-08j). 

    Energy (loss) at epoch 12 is (-3.775669574737549-4.470348358154297e-08j). 

    Energy (loss) at epoch 13 is (-3.5707380771636963-1.4901161193847656e-08j). 

    Energy (loss) at epoch 14 is (-3.615163803100586-1.7741695046424866e-07j). 

    Energy (loss) at epoch 15 is (-3.7923150062561035+5.21540641784668e-08j). 

    Energy (loss) at epoch 16 is (-3.907780408859253-7.450580596923828e-09j). 

    Energy (loss) at epoch 17 is (-3.86592435836792+3.725290298461914e-08j). 

    Energy (loss) at epoch 18 is (-3.947571277618408-8.195638656616211e-08j). 

    Energy (loss) at epoch 19 is (-4.080636978149414-1.2665987014770508e-07j). 

    Energy (loss) at epoch 20 is (-4.06942081451416-4.470348358154297e-08j). 

    Energy (loss) at epoch 21 is (-4.042268753051758-6.705522537231445e-08j). 

    Energy (loss) at epoch 22 is (-4.040976524353027-1.862645149230957e-08j). 

    Energy (loss) at epoch 23 is (-4.070771217346191+3.725290298461914e-08j). 

    Energy (loss) at epoch 24 is (-4.042365550994873-1.4901161193847656e-08j). 

    Energy (loss) at epoch 25 is (-4.083446979522705+5.960464477539063e-08j). 

    Energy (loss) at epoch 26 is (-4.170476913452148+1.4901161193847656e-08j). 

    Energy (loss) at epoch 27 is (-4.2211995124816895+2.60770320892334e-08j). 

    Energy (loss) at epoch 28 is (-4.214308738708496+1.4901161193847656e-08j). 

    Energy (loss) at epoch 29 is (-4.179408073425293-1.862645149230957e-09j). 

    Energy (loss) at epoch 30 is (-4.164424896240234-4.842877388000488e-08j). 

    Energy (loss) at epoch 31 is (-4.1653594970703125+2.60770320892334e-08j). 

    Energy (loss) at epoch 32 is (-4.1941704750061035+4.0978193283081055e-08j). 

    Energy (loss) at epoch 33 is (-4.20025110244751+2.2351741790771484e-08j). 

    Energy (loss) at epoch 34 is (-4.230255126953125+9.313225746154785e-08j). 

    Energy (loss) at epoch 35 is (-4.249992370605469+4.6566128730773926e-08j). 

    Energy (loss) at epoch 36 is (-4.243350028991699+2.514570951461792e-08j). 

    Energy (loss) at epoch 37 is (-4.230544090270996+3.166496753692627e-08j). 

    Energy (loss) at epoch 38 is (-4.245578289031982-2.9802322387695312e-08j). 

    Energy (loss) at epoch 39 is (-4.247587203979492-7.450580596923828e-09j). 

    Energy (loss) at epoch 40 is (-4.25261926651001+9.313225746154785e-09j). 

    Energy (loss) at epoch 41 is (-4.267864227294922+1.210719347000122e-08j). 

    Energy (loss) at epoch 42 is (-4.280088424682617-3.026798367500305e-09j). 

    Energy (loss) at epoch 43 is (-4.277209281921387-5.122274160385132e-08j). 

    Energy (loss) at epoch 44 is (-4.275751113891602-1.4901161193847656e-08j). 

    Energy (loss) at epoch 45 is (-4.275330066680908+2.421438694000244e-08j). 

    Energy (loss) at epoch 46 is (-4.281876564025879+2.421438694000244e-08j). 

    Energy (loss) at epoch 47 is (-4.283692836761475+2.1420419216156006e-08j). 

    Energy (loss) at epoch 48 is (-4.296038627624512+9.313225746154785e-10j). 

    Energy (loss) at epoch 49 is (-4.305900573730469-8.381903171539307e-09j). 

    Energy (loss) at epoch 50 is (-4.303496837615967+5.587935447692871e-09j). 

    Energy (loss) at epoch 51 is (-4.3019185066223145+1.30385160446167e-08j). 

    Energy (loss) at epoch 52 is (-4.30905818939209+0j). 

    Energy (loss) at epoch 53 is (-4.306426048278809+5.587935447692871e-09j). 

    Energy (loss) at epoch 54 is (-4.307972431182861-1.6065314412117004e-08j). 

    Energy (loss) at epoch 55 is (-4.313080787658691+6.984919309616089e-09j). 

    Energy (loss) at epoch 56 is (-4.315537452697754+1.6763806343078613e-08j). 

    Energy (loss) at epoch 57 is (-4.316586494445801-2.7939677238464355e-09j). 

    Energy (loss) at epoch 58 is (-4.319218635559082+3.073364496231079e-08j). 

    Energy (loss) at epoch 59 is (-4.322122097015381-2.3283064365386963e-09j). 

    Energy (loss) at epoch 60 is (-4.319937705993652+1.0477378964424133e-09j). 

    Energy (loss) at epoch 61 is (-4.322716236114502+4.190951585769653e-09j). 

    Energy (loss) at epoch 62 is (-4.324793338775635+0j). 

    Energy (loss) at epoch 63 is (-4.3239006996154785+2.8870999813079834e-08j). 

    Energy (loss) at epoch 64 is (-4.325973033905029-1.3969838619232178e-09j). 

    Energy (loss) at epoch 65 is (-4.326516151428223-6.984919309616089e-10j). 

    Energy (loss) at epoch 66 is (-4.326590538024902+2.0954757928848267e-09j). 

    Energy (loss) at epoch 67 is (-4.327487468719482-2.0489096641540527e-08j). 

    Energy (loss) at epoch 68 is (-4.329115867614746-3.725290298461914e-09j). 

    Energy (loss) at epoch 69 is (-4.329204082489014+3.725290298461914e-09j). 

    Energy (loss) at epoch 70 is (-4.329692840576172-2.3283064365386963e-10j). 

    Energy (loss) at epoch 71 is (-4.331037998199463-7.596099749207497e-09j). 

    Energy (loss) at epoch 72 is (-4.330036163330078+8.149072527885437e-09j). 

    Energy (loss) at epoch 73 is (-4.330178260803223+5.122274160385132e-09j). 

    Energy (loss) at epoch 74 is (-4.330663681030273+4.656612873077393e-10j). 

    Energy (loss) at epoch 75 is (-4.3307271003723145+8.847564458847046e-09j). 

    Energy (loss) at epoch 76 is (-4.331456184387207+8.381903171539307e-09j). 

    Energy (loss) at epoch 77 is (-4.33188533782959+1.1641532182693481e-10j). 

    Energy (loss) at epoch 78 is (-4.331549644470215-9.313225746154785e-10j). 

    Energy (loss) at epoch 79 is (-4.331512928009033+4.656612873077393e-10j). 





.. GENERATED FROM PYTHON SOURCE LINES 107-120

.. code-block:: default

    Ising_H = TTMatrix(Ising_H).to_matrix()
    true_energies, _ = tl.eigh(Ising_H)
    ground_state_energy = true_energies[0]
    plt.figure()
    plt.plot(energy_vec.detach().cpu().numpy(), color='r')
    plt.hlines(ground_state_energy.detach().cpu().numpy(), 0, nepochs, color='k', linestyle='--')
    plt.xlabel('Epochs')
    plt.ylabel('Energy')
    plt.xticks()
    plt.yticks()
    plt.legend(['Variational Solution', 'Ground Truth'])
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :alt: plot vqe transverse field Ising
   :srcset: /auto_examples/images/sphx_glr_plot_vqe_transverse_field_Ising_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-124

References
----------
.. [1] Peruzzo, A., McClean, J., Shadbolt, P. et al. A variational eigenvalue solver on a photonic quantum processor. Nat Commun 5, 4213 (2014). 


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.685 seconds)


.. _sphx_glr_download_auto_examples_plot_vqe_transverse_field_Ising.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_vqe_transverse_field_Ising.py <plot_vqe_transverse_field_Ising.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_vqe_transverse_field_Ising.ipynb <plot_vqe_transverse_field_Ising.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
